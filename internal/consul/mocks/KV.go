// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	api "github.com/hashicorp/consul/api"

	mock "github.com/stretchr/testify/mock"
)

// KV is an autogenerated mock type for the KV type
type KV struct {
	mock.Mock
}

// Get provides a mock function with given fields: key, q
func (_m *KV) Get(key string, q *api.QueryOptions) (*api.KVPair, *api.QueryMeta, error) {
	ret := _m.Called(key, q)

	var r0 *api.KVPair
	if rf, ok := ret.Get(0).(func(string, *api.QueryOptions) *api.KVPair); ok {
		r0 = rf(key, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*api.KVPair)
		}
	}

	var r1 *api.QueryMeta
	if rf, ok := ret.Get(1).(func(string, *api.QueryOptions) *api.QueryMeta); ok {
		r1 = rf(key, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.QueryMeta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *api.QueryOptions) error); ok {
		r2 = rf(key, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// List provides a mock function with given fields: prefix, q
func (_m *KV) List(prefix string, q *api.QueryOptions) (api.KVPairs, *api.QueryMeta, error) {
	ret := _m.Called(prefix, q)

	var r0 api.KVPairs
	if rf, ok := ret.Get(0).(func(string, *api.QueryOptions) api.KVPairs); ok {
		r0 = rf(prefix, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.KVPairs)
		}
	}

	var r1 *api.QueryMeta
	if rf, ok := ret.Get(1).(func(string, *api.QueryOptions) *api.QueryMeta); ok {
		r1 = rf(prefix, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*api.QueryMeta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, *api.QueryOptions) error); ok {
		r2 = rf(prefix, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
