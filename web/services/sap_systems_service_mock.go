// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package services

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/trento-project/trento/web/models"
)

// MockSAPSystemsService is an autogenerated mock type for the SAPSystemsService type
type MockSAPSystemsService struct {
	mock.Mock
}

// GetAllApplications provides a mock function with given fields: filter, page
func (_m *MockSAPSystemsService) GetAllApplications(filter *SAPSystemFilter, page *Page) (models.SAPSystemList, error) {
	ret := _m.Called(filter, page)

	var r0 models.SAPSystemList
	if rf, ok := ret.Get(0).(func(*SAPSystemFilter, *Page) models.SAPSystemList); ok {
		r0 = rf(filter, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.SAPSystemList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*SAPSystemFilter, *Page) error); ok {
		r1 = rf(filter, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllApplicationsSIDs provides a mock function with given fields:
func (_m *MockSAPSystemsService) GetAllApplicationsSIDs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllApplicationsTags provides a mock function with given fields:
func (_m *MockSAPSystemsService) GetAllApplicationsTags() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDatabases provides a mock function with given fields: filter, page
func (_m *MockSAPSystemsService) GetAllDatabases(filter *SAPSystemFilter, page *Page) (models.SAPSystemList, error) {
	ret := _m.Called(filter, page)

	var r0 models.SAPSystemList
	if rf, ok := ret.Get(0).(func(*SAPSystemFilter, *Page) models.SAPSystemList); ok {
		r0 = rf(filter, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.SAPSystemList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*SAPSystemFilter, *Page) error); ok {
		r1 = rf(filter, page)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDatabasesSIDs provides a mock function with given fields:
func (_m *MockSAPSystemsService) GetAllDatabasesSIDs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDatabasesTags provides a mock function with given fields:
func (_m *MockSAPSystemsService) GetAllDatabasesTags() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationsCount provides a mock function with given fields:
func (_m *MockSAPSystemsService) GetApplicationsCount() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabasesCount provides a mock function with given fields:
func (_m *MockSAPSystemsService) GetDatabasesCount() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
