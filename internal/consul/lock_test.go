package consul

import (
	mock "github.com/stretchr/testify/mock"
	"testing"

	consulApi "github.com/hashicorp/consul/api"
	"github.com/pkg/errors"
	"github.com/stretchr/testify/assert"
)

// In order to generate the next mock follow the next steps
// Uncomment the next line in the lock.go file
// type GetLock func(c *client, prefix string, q *consulApi.QueryOptions) (*consulApi.KVPair, *consulApi.QueryMeta, error)
// Move to this folder: cd internal/consul
// Run: mockery --name=GetLock
// This will create the file mocks/GetLock.go
// Copy the content of that file here and remove the file later
// The methods needs some minor changes to adapt the import names

// GetLock is an autogenerated mock type for the GetLock type
type MockGetLock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: c, prefix, q
func (_m *MockGetLock) Execute(c *client, prefix string, q *consulApi.QueryOptions) (*consulApi.KVPair, *consulApi.QueryMeta, error) {
	ret := _m.Called(c, prefix, q)

	var r0 *consulApi.KVPair
	if rf, ok := ret.Get(0).(func(*client, string, *consulApi.QueryOptions) *consulApi.KVPair); ok {
		r0 = rf(c, prefix, q)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*consulApi.KVPair)
		}
	}

	var r1 *consulApi.QueryMeta
	if rf, ok := ret.Get(1).(func(*client, string, *consulApi.QueryOptions) *consulApi.QueryMeta); ok {
		r1 = rf(c, prefix, q)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*consulApi.QueryMeta)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(*client, string, *consulApi.QueryOptions) error); ok {
		r2 = rf(c, prefix, q)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

func TestLockWaitReleased(t *testing.T) {
	c, _ := DefaultClient()
	fakeGetLock := new(MockGetLock)
	getLock = fakeGetLock.Execute

	kvPair1 := &consulApi.KVPair{
		Flags:   consulApi.LockFlagValue,
		Session: "session",
	}

	kvPair2 := &consulApi.KVPair{
		Flags:   consulApi.LockFlagValue,
		Session: "session",
	}

	kvPair3 := &consulApi.KVPair{
		Flags:   consulApi.LockFlagValue,
		Session: "",
	}

	qMeta := &consulApi.QueryMeta{
		LastIndex: 10,
	}

	query1 := &consulApi.QueryOptions{
		WaitTime: waitTime,
	}

	query2 := &consulApi.QueryOptions{
		WaitTime:  waitTime,
		WaitIndex: 10,
	}

	fakeGetLock.On("Execute", c, "test", query1).Return(kvPair1, qMeta, nil)
	fakeGetLock.On("Execute", c, "test", query2).Return(kvPair2, qMeta, nil).Times(1)
	fakeGetLock.On("Execute", c, "test", query2).Return(kvPair3, qMeta, nil)

	err := c.WaitLock("test")

	assert.NoError(t, err)
	fakeGetLock.AssertExpectations(t)
}

func TestLockWaitReleasedErr(t *testing.T) {
	c, _ := DefaultClient()
	fakeGetLock := new(MockGetLock)
	getLock = fakeGetLock.Execute

	kvPair1 := &consulApi.KVPair{
		Flags:   consulApi.LockFlagValue,
		Session: "session",
	}

	qMeta := &consulApi.QueryMeta{
		LastIndex: 10,
	}

	query1 := &consulApi.QueryOptions{
		WaitTime: waitTime,
	}

	fakeGetLock.On("Execute", c, "test", query1).Return(kvPair1, qMeta, errors.New("error"))

	err := c.WaitLock("test")

	assert.EqualError(t, err, "failed to read lock: error")
	fakeGetLock.AssertExpectations(t)
}

func TestLockWaitReleasedLockConflict(t *testing.T) {
	c, _ := DefaultClient()
	fakeGetLock := new(MockGetLock)
	getLock = fakeGetLock.Execute

	kvPair1 := &consulApi.KVPair{
		Flags:   0,
		Session: "session",
	}

	qMeta := &consulApi.QueryMeta{
		LastIndex: 10,
	}

	query1 := &consulApi.QueryOptions{
		WaitTime: waitTime,
	}

	fakeGetLock.On("Execute", c, "test", query1).Return(kvPair1, qMeta, nil)

	err := c.WaitLock("test")

	assert.EqualError(t, err, "Existing key does not match lock use")
	fakeGetLock.AssertExpectations(t)
}

func fakeLock(l *consulApi.Lock, stopCh <-chan struct{}) (<-chan struct{}, error) {
	return nil, nil
}

func fakeLockErr(l *consulApi.Lock, stopCh <-chan struct{}) (<-chan struct{}, error) {
	return nil, errors.New("error")
}

func TestAcquireLockKey(t *testing.T) {
	c, _ := DefaultClient()
	lock = fakeLock

	l, err := c.AcquireLockKey("test")

	assert.IsType(t, &consulApi.Lock{}, l)
	assert.NoError(t, err)
}

func TestAcquireLockKeyNoKey(t *testing.T) {
	c, _ := DefaultClient()
	lock = fakeLock

	l, err := c.AcquireLockKey("")

	assert.Equal(t, (*consulApi.Lock)(nil), l)
	assert.EqualError(t, err, "missing key")
}

func TestAcquireLockKeyErr(t *testing.T) {
	c, _ := DefaultClient()
	lock = fakeLockErr

	l, err := c.AcquireLockKey("test")

	assert.Equal(t, (*consulApi.Lock)(nil), l)
	assert.EqualError(t, err, "error")
}
